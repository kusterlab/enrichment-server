image: docker:latest

variables:
  DOCKER_DRIVER: overlay2
  # hotfix for https://gitlab.com/gitlab-org/gitlab-ce/issues/64959
  DOCKER_TLS_CERTDIR: ""
  # SELECT ONE OF INTERNAL,EXTERNAL
  CI_DEPLOY_NETWORK: INTERNAL
  CI_DEPLOY_TAG: none
  # SELECT ONE OF public,private
  CI_PUBLISH: private
  CONTAINER_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH


stages:
  - build
  - test
  - deploy


build:
  stage: build
  only:
    - main
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  services:
    - name: docker:dind
      command: ["--experimental"]
  script:
    - docker pull $CONTAINER_IMAGE:latest || true
    - DOCKER_BUILDKIT=0 docker build --cache-from $CONTAINER_IMAGE:latest --tag $CONTAINER_IMAGE:$CI_COMMIT_REF_SLUG --tag $CONTAINER_IMAGE:latest .
    - docker push $CONTAINER_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $CONTAINER_IMAGE:latest
  tags:
    - docker


integration-test:
  stage: test
  image:
    name: $CONTAINER_IMAGE:latest
    entrypoint: ["/bin/sh"]
  script:
    - cd flask_server
    - poetry run pytest -v
  # TODO: remove allow_failure when pytest is found - I don't get why it can enter flask_server but then does not find pytest.
  allow_failure: true

deploy-to-swarm:
  stage: deploy
  only:
    - main
  image: kroniak/ssh-client:3.6
  script:
    ## Set CI_DEPLOY_NETWORK variable based on CI_COMMIT_REF_SLUG and CI_PUBLISH
    - CI_DEPLOY_NETWORK=$(if [ $CI_COMMIT_REF_SLUG != "main" ] || [ $CI_PUBLISH == "private" ]; then echo "INTERNAL"; else echo $CI_DEPLOY_NETWORK; fi)
    #$ Only set CI_PUBLISH to public if CI_DEPLOY_NETWORK was set to EXTERNAL
    - CI_PUBLISH=$(if [ $CI_DEPLOY_NETWORK == "INTERNAL" ]; then echo "private"; else echo $CI_PUBLISH; fi)
    - CI_DEPLOY_TAG=$(echo $CI_DEPLOY_NETWORK | tr '[:upper:]' '[:lower:]')
    - CI_PROJECT_NAMESPACE=$(echo $CI_PROJECT_NAMESPACE | tr '[:upper:]' '[:lower:]')
    - CI_PROJECT_NAME=$(echo $CI_PROJECT_NAME | tr '[:upper:]' '[:lower:]')
    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # instruct ssh to send CI_* environment variables over ssh. AcceptEnv needs to be set on HOST!!!
    - echo "SendEnv LANG CI_*" >> /etc/ssh/ssh_config
    # log into Docker registry
    - ssh deployer@$SSH_DEPLOY_HOST "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    # generate path for compose file
    - COMPOSE_PATH=/home/deployer/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG/
    # generate directory to copy files to
    - ssh deployer@$SSH_DEPLOY_HOST "mkdir -p $COMPOSE_PATH"
    # copy necessary files to host (e.g. docker-compose.yml)
    - scp docker-compose.yml deployer@$SSH_DEPLOY_HOST:$COMPOSE_PATH
    # start new container
    - ssh -o SendEnv=CI_* deployer@$SSH_DEPLOY_HOST "cd $COMPOSE_PATH && CI_REGISTRY=$CI_REGISTRY CI_PROJECT_NAMESPACE=$CI_PROJECT_NAMESPACE CI_PROJECT_NAME=$CI_PROJECT_NAME CI_COMMIT_REF_SLUG=$CI_COMMIT_REF_SLUG CI_DEPLOY_NETWORK=$CI_DEPLOY_NETWORK CI_PUBLISH=$CI_PUBLISH CI_DEPLOY_TAG=$CI_DEPLOY_TAG docker stack deploy --with-registry-auth --compose-file docker-compose.yml $CI_COMMIT_REF_SLUG"
  tags:
    - docker

